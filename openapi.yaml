openapi: 3.0.3
info:
    title: Karlis API
    version: '713.33'
    description: YAOA
    termsOfService: OKAY
    contact:
        email: email@email.com
        name: Youza
        url: www.example.com/contact
    license:
        name: MIT 2.0
        url: www.example.com/license
servers:
    - url: http://localhost:3000/
      variables: {}
      description: Local server
    - url: https://my-json-server.typicode.com/CurtisLV/API_workshop_23.05.2023./api
      variables: {}
      description: My db.json
    - url: https://my-json-server.typicode.com/bearc0025/{repo}
      variables:
          repo:
              default: api
              enum:
                  - api
                  - repo2
                  - repo3
              description: 'api: test, repo2: dev, repo3: deploy'
paths:
    /users:
        summary: fetch and create users
        description: returns users, stores users
        get:
            summary: fetch users from server
            description: returns users
            operationId: fetchUsers
            responses:
                '200':
                    $ref: '#/components/responses/UserRespBody'
                default:
                    description: Default error sample response
            tags:
                - Users
        post:
            summary: create a new user
            description: store user on server
            operationId: createUser
            requestBody:
                $ref: '#/components/requestBodies/UserPostBody'
            responses:
                '201':
                    $ref: '#/components/responses/UserRespBody'
                default:
                    description: Default error sample response
            tags:
                - Users
    /users/{userId}:
        summary: operations on a individual user
        description: update, fetch or delete a user
        parameters:
            - name: userId
              in: path
              required: true
              description: user id
              schema:
                  type: string
                  example: 1234abc
        get:
            summary: fetch a user
            description: returns a user from the server
            operationId: fetchUser
            responses:
                '200':
                    $ref: '#/components/responses/UserRespBody'
                default:
                    description: Default error sample response
            tags:
                - Users
        delete:
            summary: delete a user
            description: remove from server
            operationId: deleteUser
            responses:
                default:
                    description: Default error sample response
            tags:
                - Users
components:
    responses:
        UserRespBody:
            description: success
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/FullUser'
    requestBodies:
        UserPostBody:
            required: true
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/PostNewUser'
    schemas:
        PostNewUser:
            type: object
            properties:
                username:
                    type: string
                    example: Karlis
                score:
                    type: integer
                    example: 33
                active:
                    type: boolean
                    example: null
        FullUser:
            allOf:
                - $ref: '#/components/schemas/PostNewUser'
                - type: object
                  properties:
                      id:
                          type: string
                          example: 1234abc
